EMPTY_DIRECTROY

apiVersion: apps/v1
kind: Deployment
metadata:
 name: mydeployment
spec:
  replicas: 3
  strategy:
     type: RollingUpdate
     rollingUpdate:
         maxSurge: 2
         maxUnavailable: 0
  selector:
   matchLabels:
      env: dev
  template:
       metadata:
          labels:
              env: dev
       spec:
            containers:
                 - name: nginxcontaine
                   image: nginx
                   ports:
                     - containerPort: 80
                   volumeMounts:
                    - mountPath: "/usr/share/nginx/html"
                      name: myvolume

                 - name: anothernginx
                   image: php
                   ports:
                     - containerPort: 90
                   volumeMounts:
                    -  mountPath: "/usr/share/nginx/html"
                       name: myvolume
            volumes:
               -  name: myvolume
                  emptyDir: {}
#HOST_PATH

apiVersion: apps/v1
kind: Deployment
metadata:
   name: mydeployment
spec:
  replicas: 3
  strategy:
     type: RollingUpdate
     rollingUpdate:
         maxSurge: 2
         maxUnavailable: 0
  selector:
   matchLabels:
      env: dev
  template:
       metadata:
          labels:
              env: dev
       spec:
            containers:
                 - name: nginxcontaine
                   image: nginx
                   ports:
                     - containerPort: 80
                   volumeMounts:
                    - mountPath: "/usr/share/nginx/html"
                      name: myvolume

            volumes:
               -  name: myvolume
                  hostPath:
                     path: /data
                     type: DirectoryOrCreate


#NFS_volume
CMD=
Create EFS in AWS and click on attach , copy the NFS client path
Create a directory:
-mkdir efsdir
Install nfs-common:
-sudo apt-get install nfs-common
Paste the copied command ~/efsdir
Create a directory named test:
-sudo mkdir test
Create yml file :
-nano nfs.yml

MYDEPLOYMENT.YML-FILE

apiVersion: apps/v1
kind: Deployment
metadata:
   name: mydeployment
spec:
  replicas: 3
  strategy:
     type: RollingUpdate
     rollingUpdate:
         maxSurge: 2
         maxUnavailable: 0
  selector:
   matchLabels:
      env: dev
  template:
       metadata:
          labels:
              env: dev
       spec:
            containers:
                 - name: nginxcontaine
                   image: nginx
                   ports:
                     - containerPort: 80
                   volumeMounts:
                    - mountPath: "/usr/share/nginx/html"
                      name: myvolume

            volumes:
               -  name: myvolume
                  nfs:
                     server: efs dns name
                     path: /test


To create pod using this file:
-kubectl apply -f nfs.yml
To view list of pods:
-kubectl get pods

#CONFIGMAP_FILE

 # mysql.yml file:

 apiVersion: v1
kind: Pod
metadata:
  name: mysqlwala
spec:
  containers:
     - name: mysqlwalacontainer
       image: mysql:8.0
       env:
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
               configMapKeyRef:
                  name: mysql-config
                  key: mysql-password


 To create configmap:
-kubectl create configmap mysql-config --from-literal mysql-password=Pass@123
 To view ConfigMap:
-kubectl get configmap
 To describe configmap
-kubectl describe configmap mysql-config
To create pod :
-kubectl apply -f mysql.yml
To view pods:
-kubectl get pods

#SECERT_POD:-

Secret volume Types:

1) Generic secret volume:
 Create generic secret:
-kubectl create secret generic mysecret --from-literal mysql-password=Pass@123
 To get secret:
-kubectl get secret
 To describe secret:
-kubectl describe secret mysecret
# yml file:

apiVersion: v1
kind: Pod
metadata:
  name: mysqlwala
spec:
  containers:
     - name: mysqlwalacontainer
       image: mysql:8.0
       env:
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
               secretKeyRef:
                  name: mysecret
                  key: mysql-password


2) Docker-config secret volume:
Create Docker-config secret: 
-kubectl create secret docker-registry mydockersecret --docker-username=      --docker-password=      --docker-server=hub.docker.com --docker-email=      
To get secret:
-kubectl get secret
To describe secret:
-kubectl describe secret mysecret
# yml file:

apiVersion: v1
kind: Pod
metadata:
  name: mysqlwala
spec:
imagePullSecrets:
    - name: mydockersecret
  containers:
     - name: mysqlwalacontainer
       image: mysql:8.0
       env:
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
               configMapKeyRef:
                  name: mysql-config
                  key: mysql-password

#PV&PVC_FILE

- Create a directory:
= mkdir pvpvc
- Create 3 yml files in this directory : pv.yml , pvc.yml and pod.yml

# pv.yml:

apiVersion: v1
kind: PersistentVolume
metadata:
    name: mypv
spec:
   capacity:
      storage: 1Gi
   accessModes:
       - ReadWriteOnce
   persistentVolumeReclaimPolicy: Retain
   hostPath:
       path: /mydata

# pvc.yml:

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: mypvc
spec:
   accessModes:
       - ReadWriteOnce
   resources:
      requests:
         storage: 1Gi

# pod.yml:

apiVersion: v1
kind: Pod
metadata:
    name: ngipod
spec:
   containers:
    - name: mycontainer
      image: nginx
      volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: myvol
   volumes:
       - name: myvol
         persistentVolumeClaim:
            claimName: mypvc

 Create pods for this files:
-kubectl apply -f pv.yml
-kubectl apply -f pvc.yml
-kubectl apply -f pod.yml
 To view list of PV:
-kubectl get pv
 To view list of PVC:
-kubectl get pvc
 To view list of Pods:
-kubectl get pods
